/**
 * Copyright 2017 Manuel Fasching <manuel.fasching@tum.de>
 * Distributed under the MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished
 * to do so, subject to the following conditions:
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#include <assembly__sse_4_1.hh>
#include <iostream>
#include <stdio.h>
#include <stdint.h>
#include <cmath>
#include <cstring>

#define LAST_XMM_REG 15


|.arch x64

|.section code, data

|.globals lbl_
|.actionlist impala_actions

#include <sys/mman.h>

#if !defined(MAP_ANONYMOUS) && defined(MAP_ANON)
#define MAP_ANONYMOUS MAP_ANON
#endif

Assembly__SSE_4_1::~Assembly__SSE_4_1()
{
    dasm_free(&d);
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::initialize(int parameterCount) {
    dasm_init(&d, DASM_MAXSECTION);

    void* labels[lbl__MAX];
    dasm_setupglobal(&d, labels, lbl__MAX);

    dasm_setup(&d, impala_actions);

    dasm_growpc(&d, 0);

    Dst = &d;

    // First 8 arguments are passed in registers
    stackPos = parameterCount >= 8 ? 7 : parameterCount-1;
}
/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::prologue(){
    | push rbp
    | push r12
    | mov rbp, rsp
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::growPC(unsigned npc)
{
    dasm_growpc(&d, npc);
}

void Assembly__SSE_4_1::reserveMemoryForLocalVariables(int variableCount)
{
    | sub rsp, variableCount*8
}
/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::pushConstantToStack(double value){
    stackPos++;

    // DynASM is only able to accept imm64 values, when the mov64 instruction is used.
    // So we have to mask the floating point value as a 64 byte int. It's the only way
    // to load a floating point constant in a register...
    long long imm64;
    memcpy(&imm64, &value, sizeof(value));

    if(stackPos <= LAST_XMM_REG) {
        | mov64 rax, imm64
        | mov qword[rsp-8], rax
        | movq xmm(stackPos), qword [rsp-8]
    }
    else {
        | sub rsp, 8
        | mov64 rax, imm64
        | mov qword[rsp], rax
    }
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::storeLocalVariable(int index) {
    if(stackPos <= LAST_XMM_REG) {
        | movq qword [rbp-8-index*8], xmm(stackPos)
    }
    else{
        | mov r10, qword [rsp]
        | mov qword [rbp-8-index*8], r10
        | add rsp, 8
    }

    stackPos--;
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::pushParameterToStack(int index) {
    stackPos++;
    // See x64 calling conventions. Paramters 1-8 are passed in registers

    if(stackPos <= LAST_XMM_REG) {
        if(index <= 7){
            | movq xmm(stackPos), xmm(index)
        }
        else {
            | movq xmm(stackPos), qword [rbp+8+(index-7)*8]
        }
    }
    else{
        | sub rsp, 8
        if(index <= 7){
            | movq qword[rsp], xmm(index)
        }
        else {
            | mov r10, qword [rbp+8+(index-7)*8]
            | mov qword[rsp], r10
        }
    }

}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::replaceParameter(int index) {
    // See x64 calling conventions. Paramters 1-8 are passed in registers
    if(stackPos <= LAST_XMM_REG) {
        if(index <= 7){
            | movq xmm(index), xmm(stackPos)
        }
        else {
            | movq qword [rbp+8+(index-7)*8], xmm(stackPos)
        }
    }
    else{
        if(index <= 7){
            | movq xmm(index), qword[rsp]
        }
        else {
            | mov r10, qword[rsp]
            | mov qword [rbp+8+(index-7)*8], r10
        }
        | add rsp, 8
    }
    stackPos--;
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::pushLocalVariableToStack(int index) {
    stackPos++;
    if(stackPos <= LAST_XMM_REG) {
        | movq xmm(stackPos), qword [rbp-8-index*8]
    }
    else{
        | sub rsp, 8
        | mov r10, qword [rbp-8-index*8]
        | mov qword[rsp], r10
    }

}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::addDynamicLabel(unsigned labelNumber) {
    | =>labelNumber:
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::jumpForwardToDynamicLabel(unsigned labelNumber) {
    | jmp =>labelNumber
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::conditionalJumpForwardToDynamicLabel(unsigned labelNumber, bool condition, CompareOperatorType operator_){
    if(stackPos <= LAST_XMM_REG) {
        | cmpsd xmm(stackPos), xmm(stackPos-1), operator_
        | ptest xmm(stackPos), xmm(stackPos)
    }
    else if (stackPos == LAST_XMM_REG+1){
        //Backup one xmm register
        | movq qword[rsp-8], xmm(0)

        // Load value in registers for comparison
        | movq xmm(0), qword[rsp]

        //Conditions are not needed anymore, but only one was stored in memory
        // rsp has to be adapted before ptest, since the instruction modifies flags
        | add rsp, 8

        | cmpsd xmm(0), xmm(LAST_XMM_REG), operator_
        | ptest xmm(0), xmm(0)

        // Restore register
        | movq xmm(0), qword[rsp-16]
    }
    else{
        // Backup one registers
        | movq qword[rsp-8], xmm(0)

        // Load values in registers for comparison
        | movq xmm(0), qword[rsp]

        //Conditions are not needed anymore
        // rsp has to be adapted before ptest, since the instruction modifies flags
        | add rsp, 16

        | cmpsd xmm(0), qword[rsp-8], operator_
        | ptest xmm(0), xmm(0)

        //Restore register
        | movq xmm(0), qword[rsp-24]

    }
    if(condition){
        | jnz => labelNumber
    }
    else{
        | jz => labelNumber
    }
    //Conditions are not needed anymore
    stackPos=stackPos-2;
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::calculateAddition(){
    if(stackPos <= LAST_XMM_REG) {
        | addsd xmm(stackPos-1), xmm(stackPos)
    }
    else if(stackPos == LAST_XMM_REG+1){
        | addsd xmm(LAST_XMM_REG), qword[rsp]
        | add rsp, 8
    }
    else{
        | movq qword[rsp-8], xmm(0)
        | movq xmm(0), qword[rsp+8]
        | addsd xmm(0), qword[rsp]
        | movq qword[rsp+8], xmm(0)
        | movq xmm(0), qword[rsp-8]
        | add rsp, 8
    }
    stackPos--;
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::calculateSubtraction(){
    if(stackPos <= LAST_XMM_REG) {
        | subsd xmm(stackPos-1), xmm(stackPos)
    }
    else if(stackPos == LAST_XMM_REG+1){
        | subsd xmm(LAST_XMM_REG), qword[rsp]
        | add rsp, 8
    }
    else{
        | movq qword[rsp-8], xmm(0)
        | movq xmm(0), qword[rsp+8]
        | subsd xmm(0), qword[rsp]
        | movq qword[rsp+8], xmm(0)
        | movq xmm(0), qword[rsp-8]
        | add rsp, 8
    }
    stackPos--;
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::calculateMultiplication(){
    if(stackPos <= LAST_XMM_REG) {
        | mulsd xmm(stackPos-1), xmm(stackPos)
    }
    else if(stackPos == LAST_XMM_REG+1){
        | mulsd xmm(LAST_XMM_REG), qword[rsp]
        | add rsp, 8
    }
    else{
        | movq qword[rsp-8], xmm(0)
        | movq xmm(0), qword[rsp+8]
        | mulsd xmm(0), qword[rsp]
        | movq qword[rsp+8], xmm(0)
        | movq xmm(0), qword[rsp-8]
        | add rsp, 8
    }
    stackPos--;
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::calculateDivision(){
    if(stackPos <= LAST_XMM_REG) {
    | divsd xmm(stackPos-1), xmm(stackPos)
    }
    else if(stackPos == LAST_XMM_REG+1){
        | divsd xmm(LAST_XMM_REG), qword[rsp]
        | add rsp, 8
    }
    else{
        | movq qword[rsp-8], xmm(0)
        | movq xmm(0), qword[rsp+8]
        | divsd xmm(0), qword[rsp]
        | movq qword[rsp+8], xmm(0)
        | movq xmm(0), qword[rsp-8]
        | add rsp, 8
    }
    stackPos--;
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::callExternalFunction(externalFunction functionPtr, unsigned numberOfArguments){

    //Backup the stack. Function arguments will be replaced by a result
    //and therefor excluded from the backup.
    //I assume, that there is no external function, which has more than 16 arguments...
    for(int i=0; i<=stackPos-numberOfArguments; i++){
        if(i<=LAST_XMM_REG){
            | movq qword [rsp-(i+1)*8], xmm(i)
        }
        else {
            | mov r10, qword [rsp+(stackPos-LAST_XMM_REG)*8-(i-LAST_XMM_REG)*8]
            | mov qword [rsp-(i+1)*8], r10
        }
    }


    //Load parameters to register
    for(int i=stackPos-numberOfArguments; i<=stackPos; i++){
        if(i<=LAST_XMM_REG){
            | movq xmm(i-(stackPos-numberOfArguments+1)), xmm(i)
        }
        else {
            | movq xmm(i-(stackPos-numberOfArguments+1)), qword[rsp+(stackPos-LAST_XMM_REG)*8-(i-LAST_XMM_REG)*8 ]
        }
    }


    // Save frame pointer in non-volatile register
    | mov r12, rsp

    // Subtract amount of register backup
    | sub rsp, (stackPos-numberOfArguments)*8

    // Align frame pointer on 16 bit
    | and rsp, -16

    // Add Shadow space (32bit)
    // Not sure, if this is still needed.
    | sub rsp, 32

    // Move address of function to register
    | mov64 rax, (uintptr_t) functionPtr

    // Call function
    | call rax

    // Restore rsp
    | mov rsp, r12


    //Function parameters are not needed anymore
    //Set the stackPos accordingly
    | mov r10, rsp
    if(stackPos > LAST_XMM_REG){
        if(stackPos-LAST_XMM_REG<=(numberOfArguments)){
            | add rsp, (stackPos-LAST_XMM_REG)*8
        }
        else{
            | add rsp, numberOfArguments*8
        }
    }
    stackPos = stackPos-numberOfArguments;



    stackPos++;
    //Put function result on top of stack
    if(stackPos <= LAST_XMM_REG){
        | movq xmm(stackPos), xmm0
    }
    else {
        | sub rsp, 8
        | movq qword[rsp], xmm0
    }


    //Restore old stack
    for(int i=stackPos-1; i>=0; i--){
        if(i<=LAST_XMM_REG){
            | movq xmm(i), qword [r10-(i+1)*8]
        }
        else {
            | mov r11, qword [r10-(i+1)*8]
            | mov qword[rsp+(stackPos-i)*8], r11
        }
    }
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::extractResult(){
     if(stackPos <= LAST_XMM_REG){
        | movq xmm0, xmm(stackPos)
     }
     else {
        | movq xmm0, qword[rsp]
     }
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::epilogue(){
    | mov rsp, rbp
    | pop r12
    | pop rbp
    | ret
}

/**
 * @see assembly.hh
 */
dasm_gen_func Assembly__SSE_4_1::linkAndEncode(){
  size_t sz;
  void* buf;
  dasm_link(Dst, &sz);
  buf = mmap(0, sz, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
  dasm_encode(Dst, buf);
  mprotect(buf, sz, PROT_READ | PROT_EXEC);
  return (dasm_gen_func) buf;
}

