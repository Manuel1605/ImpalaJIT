/**
 * Copyright 2017 Manuel Fasching <manuel.fasching@tum.de>
 * Distributed under the MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished
 * to do so, subject to the following conditions:
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#include <assembly__sse_4_1.hh>
#include <iostream>
#include <stdio.h>
#include <stdint.h>
#include <cmath>



|.arch x64

|.section code

|.globals lbl_
|.actionlist impala_actions

#include <sys/mman.h>

#if !defined(MAP_ANONYMOUS) && defined(MAP_ANON)
#define MAP_ANONYMOUS MAP_ANON
#endif

Assembly__SSE_4_1::~Assembly__SSE_4_1()
{
    dasm_free(&d);
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::initialize(int parameterCount) {
    std::cout << "ImpalaJIT: AVX Support disabled" << std::endl;

    dasm_init(&d, DASM_MAXSECTION);

    void* labels[lbl__MAX];
    dasm_setupglobal(&d, labels, lbl__MAX);

    dasm_setup(&d, impala_actions);

    dasm_growpc(&d, 0);

    Dst = &d;

    stackPos = parameterCount >= 8 ? 7 : parameterCount-1;
}
/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::prologue(){
    | push rbp
    | push r12
    | mov rbp, rsp
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::growPC(unsigned npc)
{
    dasm_growpc(&d, npc);
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::pushConstantToStack(double value){
    stackPos++;
    double* ptr = static_cast<double*>(malloc(sizeof(double)));
    *ptr = value;
    | movq xmm(stackPos), qword[ptr]
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::storeLocalVariable() {
    | sub rsp, 8
    | movq qword [rsp], xmm(stackPos)
    stackPos--;
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::pushParameterToStack(int index) {
    stackPos++;
    // See x64 calling conventions. Paramters 1-8 are passed in registers
    if(index <= 7){
        | movq xmm(stackPos), xmm(index)
    }
    else {
        | movq xmm(stackPos), qword [rbp+8+(index-7)*8]
    }
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::replaceParameter(int index) {
    // See x64 calling conventions. Paramters 1-8 are passed in registers
    if(index <= 7){
        | movq xmm(index), xmm(stackPos)
    }
    else {
        | movq qword [rbp+8+(index-7)*8], xmm(stackPos)
    }
    stackPos--;
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::pushLocalVariableToStack(int index) {
    stackPos++;
    | movq xmm(stackPos), qword [rbp-8-index*8]
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::replaceLocalVariable(int index) {
    | movq qword [rbp-8-index*8], xmm(stackPos)
    stackPos--;
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::addDynamicLabel(unsigned labelNumber) {
    | =>labelNumber:
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::jumpForwardToDynamicLabel(unsigned labelNumber) {
    | jmp =>labelNumber
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::conditionalJumpForwardToDynamicLabel(unsigned labelNumber, bool condition, CompareOperatorType operator_){
     | cmpsd xmm(stackPos), xmm(stackPos-1), operator_
     | ptest xmm(stackPos), xmm(stackPos)
     if(condition){
         | jnz => labelNumber
     }
     else{
        | jz => labelNumber
     }
     stackPos--;
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::calculateAddition(){
    | addsd xmm(stackPos-1), xmm(stackPos)
    stackPos--;
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::calculateSubtraction(){
    | subsd xmm(stackPos-1), xmm(stackPos)
    stackPos--;
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::calculateMultiplication(){
    | mulsd xmm(stackPos-1), xmm(stackPos)
    stackPos--;
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::calculateDivision(){
    | divsd xmm(stackPos-1), xmm(stackPos)
    stackPos--;
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::callExternalFunction(externalFunction functionPtr, unsigned numberOfArguments){

    //Backup the stack. Function arguments will be replaced by a result
    //and therefor excluded from the backup.
    for(int i=0; i<stackPos-(numberOfArguments-1); i++){
       | sub rsp, 8
       | movq qword [rsp], xmm(i)
    }


    //Load parameters to register
    for(int i=stackPos-(numberOfArguments-1); i<=stackPos; i++){
       | movq xmm(i-(stackPos-(numberOfArguments-1))), xmm(i)
    }

    //Function parameters are not needed anymore
    //Set the stackPos accordingly
    stackPos = stackPos-(numberOfArguments-1);

    // Save frame pointer in non-volatile register
    | mov r12, rsp

    // Align frame pointer on 16 bit
    | and rsp, -16

    // Add Shadow space (32bit)
    // Not sure, if this is still needed.
    | sub rsp, 32

    // Move address of function to register
    | mov64 rax, (uintptr_t) functionPtr

    // Call function
    | call rax

    // Restore rsp
    | mov rsp, r12


    //Put function result on top of stack
    | movq xmm(stackPos), xmm0

    //Restore old stack
    for(int i=stackPos-1; i>=0; i--){
        | movq xmm(i), qword [rsp]
        | add rsp, 8
    }
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::extractResult(){
     | movq xmm0, xmm(stackPos)
}

/**
 * @see assembly.hh
 */
void Assembly__SSE_4_1::epilogue(){
    | mov rsp, rbp
    | pop r12
    | pop rbp
    | ret
}

/**
 * @see assembly.hh
 */
dasm_gen_func Assembly__SSE_4_1::linkAndEncode(){
  size_t sz;
  void* buf;
  dasm_link(Dst, &sz);
  buf = mmap(0, sz, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
  dasm_encode(Dst, buf);
  mprotect(buf, sz, PROT_READ | PROT_EXEC);
  return (dasm_gen_func) buf;
}

