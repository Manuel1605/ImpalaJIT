//
// Created by manuel on 06.11.16.
//

#include <assembly.hh>
#include <stack>
#include <stdio.h>

|.arch x64

|.section code
|.globals lbl_
|.actionlist bf_actions

#if _WIN32
#include <Windows.h>
#else
#include <sys/mman.h>
#if !defined(MAP_ANONYMOUS) && defined(MAP_ANON)
#define MAP_ANONYMOUS MAP_ANON
#endif
#endif


dasm_State* d;
void** labels;
dasm_State** Dst;
int operator_;

Assembly::Assembly(){
    dasm_init(&d, DASM_MAXSECTION);

    labels = (void**) malloc(lbl__MAX);
    dasm_setupglobal(&d, labels, lbl__MAX);

    dasm_setup(&d, bf_actions);

    Dst = &d;
}

void Assembly::push(double* value){
    | fld qword [value]
}
void Assembly::addDynamicLabel1(){
    | 1:
}
void Assembly::addDynamicLabel2(){
    | 2:
}
void Assembly::jumpForwardTo1(){
    | jmp >1
}
void Assembly::jumpForwardTo2(){
    | jmp >2
}
void Assembly::conditionalJumpForwardTo1(){
    | jnz >1
}
void Assembly::compile(){

    switch(operator_){
        case IDENTITY:
            {
                double* result = (double*) malloc(sizeof(double));
                | fstp qword [result]
                | movlpd xmm0, qword [result]
                | ret
               break;
           }
        case ADD:
            {
                | faddp st1
                break;
            }
         case SUB:
            {
                | fsubp st1
                break;
            }
         case MUL:
            {
                | fmulp st1
                break;
            }
         case DIV:
            {
                | fdivp st1
                break;
            }
         case NEG:
            {
                | fchs
                break;
            }
         case SQRT:
            {
                | fsqrt
                break;
            }
         case POW:
            {
                printf("^: Operation not supported yet");
                exit(0);
            }
         case EQ:
            {
                | fcomip st1
                | fpop
                | jnz >1
                break;
            }
          case NE:
            {
                | fcomip st1
                | fpop
                | jz >1
                break;
            }
         case GT:
            {
                | fcomip st1
                | fpop
                | jbe >1
                break;
            }
         case LT:
            {
                | fcomip st1
                | fpop
                | jae >1
                break;
            }
         case GTE:
            {
                | fcomip st1
                | fpop
                | jb >1
                break;
            }
         case LTE:
            {
                | fcomip st1
                | fpop
                | ja >1
                break;
            }
    }

    operator_ = EMPTY;
}

Assembly::~Assembly(){
    dasm_free(&d);
}


void* Assembly::linkAndEncode(){
  operator_ = IDENTITY;
  compile();
  size_t sz;
  void* buf;
  dasm_link(Dst, &sz);
  buf = mmap(0, sz, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
  dasm_encode(Dst, buf);
  mprotect(buf, sz, PROT_READ | PROT_EXEC);
  return buf;
}
